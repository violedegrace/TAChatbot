#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chatbot
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbTAChatbot")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttbDomain(tbDomain instance);
    partial void UpdatetbDomain(tbDomain instance);
    partial void DeletetbDomain(tbDomain instance);
    partial void InserttbInfDetail(tbInfDetail instance);
    partial void UpdatetbInfDetail(tbInfDetail instance);
    partial void DeletetbInfDetail(tbInfDetail instance);
    partial void InserttbInformasi(tbInformasi instance);
    partial void UpdatetbInformasi(tbInformasi instance);
    partial void DeletetbInformasi(tbInformasi instance);
    partial void InserttbLog(tbLog instance);
    partial void UpdatetbLog(tbLog instance);
    partial void DeletetbLog(tbLog instance);
    partial void InserttbLogDetail(tbLogDetail instance);
    partial void UpdatetbLogDetail(tbLogDetail instance);
    partial void DeletetbLogDetail(tbLogDetail instance);
    partial void InserttbState(tbState instance);
    partial void UpdatetbState(tbState instance);
    partial void DeletetbState(tbState instance);
    partial void InserttbUser(tbUser instance);
    partial void UpdatetbUser(tbUser instance);
    partial void DeletetbUser(tbUser instance);
    #endregion
		
		public dbDataContext() : 
				base(global::Chatbot.Properties.Settings.Default.dbTAChatbotConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbDomain> tbDomains
		{
			get
			{
				return this.GetTable<tbDomain>();
			}
		}
		
		public System.Data.Linq.Table<tbInfDetail> tbInfDetails
		{
			get
			{
				return this.GetTable<tbInfDetail>();
			}
		}
		
		public System.Data.Linq.Table<tbInformasi> tbInformasis
		{
			get
			{
				return this.GetTable<tbInformasi>();
			}
		}
		
		public System.Data.Linq.Table<tbLog> tbLogs
		{
			get
			{
				return this.GetTable<tbLog>();
			}
		}
		
		public System.Data.Linq.Table<tbLogDetail> tbLogDetails
		{
			get
			{
				return this.GetTable<tbLogDetail>();
			}
		}
		
		public System.Data.Linq.Table<tbState> tbStates
		{
			get
			{
				return this.GetTable<tbState>();
			}
		}
		
		public System.Data.Linq.Table<tbStatePrg> tbStatePrgs
		{
			get
			{
				return this.GetTable<tbStatePrg>();
			}
		}
		
		public System.Data.Linq.Table<tbUser> tbUsers
		{
			get
			{
				return this.GetTable<tbUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbDomain")]
	public partial class tbDomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<tbInformasi> _tbInformasis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tbDomain()
		{
			this._tbInformasis = new EntitySet<tbInformasi>(new Action<tbInformasi>(this.attach_tbInformasis), new Action<tbInformasi>(this.detach_tbInformasis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbDomain_tbInformasi", Storage="_tbInformasis", ThisKey="Id", OtherKey="DomainID")]
		public EntitySet<tbInformasi> tbInformasis
		{
			get
			{
				return this._tbInformasis;
			}
			set
			{
				this._tbInformasis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbInformasis(tbInformasi entity)
		{
			this.SendPropertyChanging();
			entity.tbDomain = this;
		}
		
		private void detach_tbInformasis(tbInformasi entity)
		{
			this.SendPropertyChanging();
			entity.tbDomain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbInfDetail")]
	public partial class tbInfDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _InformationID;
		
		private string _info;
		
		private string _Awal;
		
		private string _Penghubung;
		
		private string _Akhir;
		
		private EntityRef<tbInformasi> _tbInformasi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInformationIDChanging(System.Nullable<int> value);
    partial void OnInformationIDChanged();
    partial void OninfoChanging(string value);
    partial void OninfoChanged();
    partial void OnAwalChanging(string value);
    partial void OnAwalChanged();
    partial void OnPenghubungChanging(string value);
    partial void OnPenghubungChanged();
    partial void OnAkhirChanging(string value);
    partial void OnAkhirChanged();
    #endregion
		
		public tbInfDetail()
		{
			this._tbInformasi = default(EntityRef<tbInformasi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationID", DbType="Int")]
		public System.Nullable<int> InformationID
		{
			get
			{
				return this._InformationID;
			}
			set
			{
				if ((this._InformationID != value))
				{
					if (this._tbInformasi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInformationIDChanging(value);
					this.SendPropertyChanging();
					this._InformationID = value;
					this.SendPropertyChanged("InformationID");
					this.OnInformationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_info", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string info
		{
			get
			{
				return this._info;
			}
			set
			{
				if ((this._info != value))
				{
					this.OninfoChanging(value);
					this.SendPropertyChanging();
					this._info = value;
					this.SendPropertyChanged("info");
					this.OninfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Awal", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Awal
		{
			get
			{
				return this._Awal;
			}
			set
			{
				if ((this._Awal != value))
				{
					this.OnAwalChanging(value);
					this.SendPropertyChanging();
					this._Awal = value;
					this.SendPropertyChanged("Awal");
					this.OnAwalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penghubung", DbType="VarChar(50)")]
		public string Penghubung
		{
			get
			{
				return this._Penghubung;
			}
			set
			{
				if ((this._Penghubung != value))
				{
					this.OnPenghubungChanging(value);
					this.SendPropertyChanging();
					this._Penghubung = value;
					this.SendPropertyChanged("Penghubung");
					this.OnPenghubungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Akhir", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Akhir
		{
			get
			{
				return this._Akhir;
			}
			set
			{
				if ((this._Akhir != value))
				{
					this.OnAkhirChanging(value);
					this.SendPropertyChanging();
					this._Akhir = value;
					this.SendPropertyChanged("Akhir");
					this.OnAkhirChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbInformasi_tbInfDetail", Storage="_tbInformasi", ThisKey="InformationID", OtherKey="Id", IsForeignKey=true)]
		public tbInformasi tbInformasi
		{
			get
			{
				return this._tbInformasi.Entity;
			}
			set
			{
				tbInformasi previousValue = this._tbInformasi.Entity;
				if (((previousValue != value) 
							|| (this._tbInformasi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbInformasi.Entity = null;
						previousValue.tbInfDetails.Remove(this);
					}
					this._tbInformasi.Entity = value;
					if ((value != null))
					{
						value.tbInfDetails.Add(this);
						this._InformationID = value.Id;
					}
					else
					{
						this._InformationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbInformasi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbInformasi")]
	public partial class tbInformasi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DomainID;
		
		private string _Judul;
		
		private System.Nullable<int> _Indexed;
		
		private string _Lokasi;
		
		private EntitySet<tbInfDetail> _tbInfDetails;
		
		private EntityRef<tbDomain> _tbDomain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDomainIDChanging(int value);
    partial void OnDomainIDChanged();
    partial void OnJudulChanging(string value);
    partial void OnJudulChanged();
    partial void OnIndexedChanging(System.Nullable<int> value);
    partial void OnIndexedChanged();
    partial void OnLokasiChanging(string value);
    partial void OnLokasiChanged();
    #endregion
		
		public tbInformasi()
		{
			this._tbInfDetails = new EntitySet<tbInfDetail>(new Action<tbInfDetail>(this.attach_tbInfDetails), new Action<tbInfDetail>(this.detach_tbInfDetails));
			this._tbDomain = default(EntityRef<tbDomain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", DbType="Int NOT NULL")]
		public int DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					if (this._tbDomain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Judul", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Judul
		{
			get
			{
				return this._Judul;
			}
			set
			{
				if ((this._Judul != value))
				{
					this.OnJudulChanging(value);
					this.SendPropertyChanging();
					this._Judul = value;
					this.SendPropertyChanged("Judul");
					this.OnJudulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Indexed", DbType="Int")]
		public System.Nullable<int> Indexed
		{
			get
			{
				return this._Indexed;
			}
			set
			{
				if ((this._Indexed != value))
				{
					this.OnIndexedChanging(value);
					this.SendPropertyChanging();
					this._Indexed = value;
					this.SendPropertyChanged("Indexed");
					this.OnIndexedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lokasi", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Lokasi
		{
			get
			{
				return this._Lokasi;
			}
			set
			{
				if ((this._Lokasi != value))
				{
					this.OnLokasiChanging(value);
					this.SendPropertyChanging();
					this._Lokasi = value;
					this.SendPropertyChanged("Lokasi");
					this.OnLokasiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbInformasi_tbInfDetail", Storage="_tbInfDetails", ThisKey="Id", OtherKey="InformationID")]
		public EntitySet<tbInfDetail> tbInfDetails
		{
			get
			{
				return this._tbInfDetails;
			}
			set
			{
				this._tbInfDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbDomain_tbInformasi", Storage="_tbDomain", ThisKey="DomainID", OtherKey="Id", IsForeignKey=true)]
		public tbDomain tbDomain
		{
			get
			{
				return this._tbDomain.Entity;
			}
			set
			{
				tbDomain previousValue = this._tbDomain.Entity;
				if (((previousValue != value) 
							|| (this._tbDomain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbDomain.Entity = null;
						previousValue.tbInformasis.Remove(this);
					}
					this._tbDomain.Entity = value;
					if ((value != null))
					{
						value.tbInformasis.Add(this);
						this._DomainID = value.Id;
					}
					else
					{
						this._DomainID = default(int);
					}
					this.SendPropertyChanged("tbDomain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbInfDetails(tbInfDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbInformasi = this;
		}
		
		private void detach_tbInfDetails(tbInfDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbInformasi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbLog")]
	public partial class tbLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Tanggal;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<tbLogDetail> _tbLogDetails;
		
		private EntityRef<tbUser> _tbUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTanggalChanging(System.Nullable<System.DateTime> value);
    partial void OnTanggalChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public tbLog()
		{
			this._tbLogDetails = new EntitySet<tbLogDetail>(new Action<tbLogDetail>(this.attach_tbLogDetails), new Action<tbLogDetail>(this.detach_tbLogDetails));
			this._tbUser = default(EntityRef<tbUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tanggal", DbType="DateTime")]
		public System.Nullable<System.DateTime> Tanggal
		{
			get
			{
				return this._Tanggal;
			}
			set
			{
				if ((this._Tanggal != value))
				{
					this.OnTanggalChanging(value);
					this.SendPropertyChanging();
					this._Tanggal = value;
					this.SendPropertyChanged("Tanggal");
					this.OnTanggalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tbUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLog_tbLogDetail", Storage="_tbLogDetails", ThisKey="Id", OtherKey="LogID")]
		public EntitySet<tbLogDetail> tbLogDetails
		{
			get
			{
				return this._tbLogDetails;
			}
			set
			{
				this._tbLogDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbUser_tbLog", Storage="_tbUser", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public tbUser tbUser
		{
			get
			{
				return this._tbUser.Entity;
			}
			set
			{
				tbUser previousValue = this._tbUser.Entity;
				if (((previousValue != value) 
							|| (this._tbUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbUser.Entity = null;
						previousValue.tbLogs.Remove(this);
					}
					this._tbUser.Entity = value;
					if ((value != null))
					{
						value.tbLogs.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbLogDetails(tbLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbLog = this;
		}
		
		private void detach_tbLogDetails(tbLogDetail entity)
		{
			this.SendPropertyChanging();
			entity.tbLog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbLogDetail")]
	public partial class tbLogDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _LogID;
		
		private string _Question;
		
		private string _Answer;
		
		private EntityRef<tbLog> _tbLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLogIDChanging(System.Nullable<int> value);
    partial void OnLogIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public tbLogDetail()
		{
			this._tbLog = default(EntityRef<tbLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int")]
		public System.Nullable<int> LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					if (this._tbLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLog_tbLogDetail", Storage="_tbLog", ThisKey="LogID", OtherKey="Id", IsForeignKey=true)]
		public tbLog tbLog
		{
			get
			{
				return this._tbLog.Entity;
			}
			set
			{
				tbLog previousValue = this._tbLog.Entity;
				if (((previousValue != value) 
							|| (this._tbLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbLog.Entity = null;
						previousValue.tbLogDetails.Remove(this);
					}
					this._tbLog.Entity = value;
					if ((value != null))
					{
						value.tbLogDetails.Add(this);
						this._LogID = value.Id;
					}
					else
					{
						this._LogID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbState")]
	public partial class tbState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tbState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbStatePrgs")]
	public partial class tbStatePrg
	{
		
		private int _StateID;
		
		private System.Nullable<int> _NextStateID;
		
		public tbStatePrg()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this._StateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextStateID", DbType="Int")]
		public System.Nullable<int> NextStateID
		{
			get
			{
				return this._NextStateID;
			}
			set
			{
				if ((this._NextStateID != value))
				{
					this._NextStateID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbUser")]
	public partial class tbUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private string _Name;
		
		private EntitySet<tbLog> _tbLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tbUser()
		{
			this._tbLogs = new EntitySet<tbLog>(new Action<tbLog>(this.attach_tbLogs), new Action<tbLog>(this.detach_tbLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbUser_tbLog", Storage="_tbLogs", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<tbLog> tbLogs
		{
			get
			{
				return this._tbLogs;
			}
			set
			{
				this._tbLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbLogs(tbLog entity)
		{
			this.SendPropertyChanging();
			entity.tbUser = this;
		}
		
		private void detach_tbLogs(tbLog entity)
		{
			this.SendPropertyChanging();
			entity.tbUser = null;
		}
	}
}
#pragma warning restore 1591
